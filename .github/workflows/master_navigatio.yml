on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache frontend node modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-node-modules-${{ hashFiles('frontend/package-lock.json') }}
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm install
        fi
    
    - name: Run frontend tests if they exist
      working-directory: ./frontend
      run: |
        if [ -d "src/__tests__" ] || ls src/**/*.test.js* 1> /dev/null 2>&1; then
          npm test -- --watchAll=false
        else
          echo "No test files found, skipping tests"
        fi
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        # Install dependencies
        npm ci
        
        # Build the React app
        CI=false npm run build
        
        # Debug: List all files in build directory
        echo "Build directory contents:"
        ls -la build/
        echo "\nLooking for index.html:"
        find build/ -name "index.html" -ls || echo "index.html not found!"
        
        # Create a test file to verify deployment
        echo "<!DOCTYPE html><html><body><h1>Test Deployment</h1><p>If you see this, the deployment worked but the React app might have issues.</p></body></html>" > build/test.html

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy build files
        echo "Copying build files to deployment directory..."
        cp -r frontend/build/* deployment/
        
        # Create a minimal web.config for Azure
        echo '<?xml version="1.0"?><configuration><system.webServer><staticContent><mimeMap fileExtension=".json" mimeType="application/json" /><mimeMap fileExtension=".woff" mimeType="application/font-woff" /><mimeMap fileExtension=".woff2" mimeType="application/font-woff" /></staticContent><rewrite><rules><rule name="React Routes" stopProcessing="true"><match url=".*" /><conditions logicalGrouping="MatchAll"><add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" /><add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" /></conditions><action type="Rewrite" url="/index.html" /></rule></rules></rewrite></system.webServer></configuration>' > deployment/web.config
        
        # Install backend dependencies
        echo "Installing backend dependencies..."
        cd backend
        npm ci --production
        cd ..
        
        # Prepare backend files
        echo "Preparing backend files..."
        mkdir -p deployment/api
        cp -r backend/* deployment/api/
        
        # Verify deployment package
        echo "Deployment package contents:"
        ls -la deployment
        echo "\nBackend files in deployment/api:"
        ls -la deployment/api
        
        # Create web.config for Azure
        echo "Creating web.config for Azure..."
        cat > deployment/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="httpPlatformHandler" path="*" verb="*" modules="httpPlatformHandler" scriptProcessor="%DEFAULTBITS%\node.exe|%HOME%\site\wwwroot\api\server.js" resourceType="Unspecified" requireAccess="Script" />
            </handlers>
            <httpPlatform processPath="%HOME%\site\wwwroot\api\server.js" stdoutLogEnabled="true" stdoutLogFile="\\?\%HOME%\LogFiles\stdout.log" startupTimeLimit="60" />
          </system.webServer>
        </configuration>
        EOF

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'navigatio-b6a2ebbvfygxazeq'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./deployment
        enable-oryx-build: false

  deploy:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    environment: 'production'
    steps:
    - name: Download build output
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: deployment

    - name: List deployment files (debug)
      run: ls -R deployment
      continue-on-error: true

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deployment/
        # Ensure we're deploying to the root of the web app
        target-path: /home/site/wwwroot
        # Clean the target directory before deployment
        clean: true

  backend:
    name: Backend
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })' localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for backend
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Cache backend node modules
      uses: actions/cache@v4
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-node-modules-${{ hashFiles('backend/package-lock.json') }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm install
        fi
    
    - name: Set up environment variables
      working-directory: ./backend
      env:
        PORT: 5000
        MONGODB_URI: ${{ secrets.MONGODB_URI || 'mongodb+srv://ayush199816:jpODnVQiVDGs5Xv4@navigatio.9ure2jk.mongodb.net/' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'your_jwt_secret_key_here' }}
        JWT_EXPIRE: 30d
        NODE_ENV: test
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
      run: |
        # Create .env file for local testing
        echo "PORT=$PORT" > .env
        echo "MONGODB_URI=$MONGODB_URI" >> .env
        echo "JWT_SECRET=$JWT_SECRET" >> .env
        echo "JWT_EXPIRE=$JWT_EXPIRE" >> .env
        echo "NODE_ENV=$NODE_ENV" >> .env
        echo "GOOGLE_AI_API_KEY=$GOOGLE_AI_API_KEY" >> .env
    
    # Uncomment when you have backend tests
    # - name: Run backend tests
    #   working-directory: ./backend
    #   run: npm test
