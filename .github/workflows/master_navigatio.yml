on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache frontend node modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-node-modules-${{ hashFiles('frontend/package-lock.json') }}
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm install
        fi
    
    - name: Run frontend tests if they exist
      working-directory: ./frontend
      run: |
        if [ -d "src/__tests__" ] || ls src/**/*.test.js* 1> /dev/null 2>&1; then
          npm test -- --watchAll=false
        else
          echo "No test files found, skipping tests"
        fi
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm run build
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend
        path: frontend/build/
        retention-days: 1
        
  backend:
    name: Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for backend
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Cache backend node modules
      uses: actions/cache@v4
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-node-modules-${{ hashFiles('backend/package-lock.json') }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        elif [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm install
        fi
    
    - name: Run backend tests if they exist
      working-directory: ./backend
      run: |
        if [ -d "test" ] || [ -d "__tests__" ] || [ -f "*.test.js" ] || [ -f "*.spec.js" ]; then
          npm test
        else
          echo "No test files found, skipping tests"
        fi
    
    - name: Build backend (if needed)
      working-directory: ./backend
      run: |
        if [ -f "package.json" ] && grep -q "build" package.json; then
          npm run build
        else
          echo "No build script found in package.json, skipping build"
        fi
    
    - name: Create deployment package
      working-directory: ./backend
      run: |
        mkdir -p ../backend-deploy
        # Copy only the necessary files for production
        cp -r node_modules package*.json .env* ../backend-deploy/ 2>/dev/null || :
        cp -r src dist build public ../backend-deploy/ 2>/dev/null || :
        cp *.js *.json ../backend-deploy/ 2>/dev/null || :
    
    - name: Upload backend package
      uses: actions/upload-artifact@v4
      with:
        name: backend
        path: backend-deploy
        retention-days: 1

  deploy:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    environment: 'production'
    
    steps:
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend
        path: frontend-build
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend
        path: backend-publish
    
    - name: Create deployment package
      run: |
        echo "Creating deployment package..."
        
        # Create directory structure
        mkdir -p deploy-package/site/wwwroot
        
        # Copy frontend build files
        cp -r frontend-build/* deploy-package/site/wwwroot/
        
        # Copy backend files
        mkdir -p deploy-package/site/backend
        cp -r backend-publish/* deploy-package/site/backend/
        
        # Create web.config for Azure App Service
        cat > deploy-package/site/web.config << 'EOL'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath=".\backend\YourBackendApp.dll" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" />
            </system.webServer>
          </location>
        </configuration>
        EOL
        
        # Show contents for debugging
        echo "Deployment package created with contents:"
        find . -type f | sort
        
    # Deploy using Azure WebApp deployment action
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deploy-package
